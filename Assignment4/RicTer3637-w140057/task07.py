# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16UTzXhs6-wxYThnrM3xSfPUhN2pmODGy

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results

#for r in g.query(q1):
#  print(r)
ns=Namespace("http://somewhere#")
for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
 print(s)

# TO DO
# Visualize the results

from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
  SELECT ?subclass WHERE{
    ?subclass rdfs:subClassOf* ns:LivingThing.
  }
  ''',initNs = {"ns": Namespace("http://somewhere#"), "rdfs":RDFS}
)

for r in g.query(q1):
  print(r.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results

#for s,p,o in g.triples((None, RDFS.subClassOf,ns.Person)):
#   print(s)

#def lista(sujeto):
#  results=[]
#  for s,p,o in g.triples((None,RDF.type,ns.Person)):
#    results.append((s,p,o))
#  for s,p,o in g.triples((None,RDF.type,ns.Researcher)):
#    results.append((s,p,o))
#  for s,p,o in g.triples((None,RDF.type,ns.Professor)):
#    results.append((s,p,o))
#  for s,p,o in g.triples((None,RDF.type,ns.PhDStudent)):
#    results.append((s,p,o))
#  return results

#for sujeto in lista(ns.Person):
#  print(sujeto[0])


for sujeto, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
     for sujeto1, p, o in g.triples((None, RDF.type, sujeto)):
         print(sujeto1)


q1 = prepareQuery('''
SELECT ?sujeto WHERE{
  {
    ?sujeto rdf:type ?subclass.
    ?subclass rdfs:subClassOf* ns:Person

  }
  UNION
  {
    ?sujeto rdf:type ns:Person.
  }

}
''',initNs = {"ns": Namespace("http://somewhere#"),"rdfs":RDFS, "rdf":RDF}


)

for r in g.query(q1):
  print(r.sujeto)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
# Visualize the results
for ind,p,o in g.triples((None, RDF.type,ns.Person)):
  print("Individual:",ind)
  for s,p,o in g.triples((ind,None,None)):
    print("Prop:",p,o)
for ind,p,o in g.triples((None,RDF.type,ns.Animal)):
  print("Individual:",ind)
  for s,p,o in g.triples((ind,None,None)):
    print("Prop:",p,o)

q1 = prepareQuery('''
SELECT distinct ?sujeto ?property ?value WHERE{
  {
    ?sujeto rdf:type ns:Person.
    ?sujeto ?property ?value
  }
  UNION
  {
    ?sujeto rdf:type ns:Animal.
    ?sujeto ?property ?value
  }
}
''',initNs = {"ns": Namespace("http://somewhere#"),"rdfs":RDFS, "rdf":RDF}
)
for r in g.query(q1):
  print (r.sujeto, r.property, r.value)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

from os import wait3
# TO DO
# Visualize the results

from rdflib import FOAF
VCARD=Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
rocky = ns.RockySmith
for person,p,o in g.triples((None,FOAF.knows,rocky)):
  print(g.value(subject=person, predicate=VCARD.Given, object=None))

q4 = """
  PREFIX ns: <http://somewhere#>
  PREFIX foaf: <http://xmlns.com/foaf/0.1/>
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
  PREFIX ns: <http://somewhere#>
 SELECT ?sujeto ?name
 WHERE {
   ?sujeto foaf:knows ns:RockySmith.
    ?sujeto vcard:Given ?name .
 }
  """
for r in g.query(q4):
  print(r[1])


"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
# Visualize the results

from rdflib import FOAF

for person,p,o in g.triples((person,FOAF.knows,None)):
  set1=set()
  for elem in g.triples((person,FOAF.knows,None)):
    set1.add(elem[2])
  if len(set1)>=2 :
    for elem in set1:
      print(person)
for person,p,o in g.triples((None,FOAF.knows,person)):
  set1=set()
  for elem in g.triples((person,FOAF.knows,None)):
    set1.add(elem[2])
  if len(set1)>=2 :
    for elem in set1:
      print(person)


q5 = """
 PREFIX ns: <http://somewhere#>
 SELECT  distinct ?sujeto
 WHERE {
   ?sujeto foaf:knows ?object .
   ?object foaf:knows ?object1 .
   FILTER(?object != ?object1)
 }
 """
for r in g.query(q5):
  print(r[0])
