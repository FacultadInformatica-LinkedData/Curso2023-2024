"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF

**Task 07: Querying RDF(s)**
"""

#pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS, FOAF, XSD
g = Graph()
ns=Namespace("http://somewhere#")
VCARD=Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

def printSubClassesOf(className):
  for s,p,o in g.triples((None, RDFS.subClassOf, className)):
    print(s) 

printSubClassesOf(ns.LivingThing)

# SPARQL
from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
  SELECT ?Subject WHERE { 
    ?Subject rdfs:subClassOf ns:LivingThing. 
  }
  ''',
  initNs = { "ns": ns} 
)

for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

def printInstancesofTaxonomy(className):
  for instance,p,o in g.triples((None, RDF.type, className)):
      print(instance)
  for s,p,o in g.triples((None, RDFS.subClassOf, className)):
    printInstancesofTaxonomy(s)

printInstancesofTaxonomy(ns.Person)

# SPARQL

q2 = prepareQuery('''
SELECT ?people WHERE { 
 ?subclasses rdfs:subClassOf* ns:Person.
  ?people a ?subclasses
}
  ''',
  initNs = { "ns": ns} 
)


for r in g.query(q2):
  print(r.people)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

def printInstancesAndPropertiesOfTaxonomy(className):
  for instance,p,o in g.triples((None, RDF.type, className)):
    for instance,properties,o in g.triples((instance, None, None)):
      print(instance,properties)
  for s,p,o in g.triples((None, RDFS.subClassOf, className)):
    printInstancesAndPropertiesOfTaxonomy(s)

printInstancesAndPropertiesOfTaxonomy(ns.Person)
printInstancesAndPropertiesOfTaxonomy(ns.Animal)

# SPARQL

q3 = prepareQuery('''
SELECT ?individual ?properties WHERE { 
  {
  ?subclasses rdfs:subClassOf* ns:Person.
  ?individual a ?subclasses.
  ?individual ?properties ?values
}
UNION 
{
  ?subclasses rdfs:subClassOf* ns:Animal.
  ?individual a ?subclasses.
  ?individual ?properties ?values                      
} 
}               
  ''',
  initNs = { "ns": ns} 
)

for r in g.query(q3):
  print(r.individual, r.properties)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

q4 = prepareQuery('''
  SELECT DISTINCT ?Given WHERE {
    ?people foaf:knows ns:RockySmith.
    ?people vcard:FN ?Given
  }
  ''',
  initNs={"foaf": FOAF, "vcard": VCARD, "ns": ns}
)

for r in g.query(q4):
    print(r.Given)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""
q5 = prepareQuery('''
  SELECT DISTINCT ?entity WHERE {
    ?entity foaf:knows ?E2.
    ?entity foaf:knows ?E3.
    FILTER (?E2 != ?E3)
  }
  ''',
  initNs = { "foaf": FOAF }
)

for r in g.query(q5):
  print(r.entity)
