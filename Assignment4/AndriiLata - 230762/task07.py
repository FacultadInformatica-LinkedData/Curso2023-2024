# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b-Nw-guQPOtdHzXpgaXShLYR8PfyRz-o

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

q1 = f"""SELECT ?subclass
        WHERE {{ ?subclass rdfs:subClassOf ns:LivingThing. }} """
for r in g.query(q1):
  print(r.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

q2 = f"""SELECT ?individuals
        WHERE {{ ?individuals a ns:Person . }}"""

for r in g.query(q2):
  print(r.individuals)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

q3 = f"""SELECT ?individual ?property ?value ?class
        WHERE {{
          {{
            ?individual a ns:Person .
            ?individual ?property ?value .
            BIND("Person" AS ?class)
          }}
          UNION
          {{
            ?individual a ns:Animal .
            ?individual ?property ?value .
            BIND("Animal" AS ?class)
          }}
        }}"""

for r in g.query(q3):
    print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

q4 = f"""SELECT ?FN
        WHERE {{
          ?name a ns:Person .
          ?name foaf:knows ?rocky .
          ?rocky vcard-rdf:Given ?donde .
          FILTER(?donde = "Rocky") .
          ?name vcard-rdf:Given ?FN
        }}"""

for r in g.query(q4):
  print(r.FN )

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

q5 = f"""
          SELECT ?ent
          WHERE {{
            ?ent foaf:knows ?pers
          }}
          GROUP BY ?ent
          HAVING (COUNT(?pers) >= 2)
      """

for r in g.query(q5):
  print(r.ent)