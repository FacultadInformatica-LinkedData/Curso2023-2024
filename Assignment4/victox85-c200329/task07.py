# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1arAQKULgYPaZBcnvbvaPBDTNwJRFIUPu

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery
ns=Namespace("http://somewhere#")
# TO DO
#RDFLIB
for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)
  
  #SPARQL
ns=Namespace("http://somewhere#")
q1 = prepareQuery('''
  SELECT ?Subclases
  WHERE
  {
    ?Subclases rdfs:subClassOf ?object.
    FILTER(?object=ns:LivingThing)
  }
''',
  initNs= {"ns": ns, "rdfs": RDFS}
)

# Visualize the results

for r in g.query(q1):
  print(r.Subclases)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
#RDFLib


for s,p,o in g.triples((None, RDF.type, ns.Person)):
    print(s)
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s1,p1,o1 in g.triples((None, RDF.type, s)):
    print(s1)
      
    #SPARQL
q2 = prepareQuery('''
SELECT ?personas
WHERE
{
 ?Subclases rdfs:subClassOf ns:Person.
  ?personas a ?Subclases
}
''',
initNs= {"ns": ns, "rdfs": RDFS}
)
# Visualize the results
for r in g.query(q2):
  print(r.personas)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
#RDFLIB
for s,p,o in g.triples((None, RDF.type, ns.Person)):
    print(s)
for s1,p1,o1 in g.triples((s, None, None)):
    print(f"property:{p1}  value:{o1}")
for s, p, o in g.triples((None, RDF.type, ns.Animal)):
    print(s)
for s1, p1, o1 in g.triples((s, None, None)):
        print(f"property:{p1}  value:{o1}")


#SPARQL
q3=prepareQuery('''
SELECT ?individual ?propertie
WHERE
{
  {
    ?indvidual rdf:type ns:Person.
    ?individual ?propertie ?val
  }
  UNION
  {
    ?indvidual rdf:type ns:Animal.
    ?individual ?propertie ?val
  }
}

''',
initNs= {"ns": ns, "rdf": RDF}
)
# Visualize the results
for r in g.query(q3):
  print(r.individual,r.propertie)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
from rdflib import FOAF
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
q4 = prepareQuery('''
SELECT ?name
WHERE
{
      ?personas foaf:knows ns:RockySmith.
      ?personas vcard:FN ?name

}
''',
initNs= {"ns":  ns, 'foaf':FOAF, "vcard":VCARD}
)
# Visualize the results
for r in g.query(q4):
  print(r.name)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
q5 = prepareQuery("""
SELECT DISTINCT ?enti
WHERE
{
    ?enti foaf:knows ?person.
}GROUP BY ?enti
HAVING (COUNT(?enti) > 1)
""",
initNs= {"ns":  ns, 'foaf':FOAF,}
)
# Visualize the results
for r in g.query(q5):
    print(r.enti)
