# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1utn7f6PjcmRB00I8ovprkQiDaX6XG5pz

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS, FOAF
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery
# TO DO

#RDFLIB
ns=Namespace("http://somewhere#")

print(ns.LivingThing)

def imprimetripletas(predicado ,clase):
  for s,p,o in g.triples((None, predicado, clase)):
    print(s)
    imprimetripletas(predicado,s)

imprimetripletas(RDFS.subClassOf,ns.LivingThing)

print("--------------------------------------------------------------")
#SPARQL
q1 = prepareQuery('''
  PREFIX rdf:<http://www.w3.org/2000/01/rdf-schema#>
  PREFIX ns:<http://somewhere#>
  SELECT ?Subject WHERE {
    ?Subject rdf:subClassOf* ns:LivingThing.
  }
  '''
)
# Visualize the results
for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO

#RDFLIB
for s,p,o in g.triples((None, RDF.type, ns.Person)):
    print(s)
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s1,p1,o1 in g.triples((None, RDF.type, s)):
    print(s1)

print("--------------------------------------------------------------")

#SPARQL
q1 = prepareQuery('''
  PREFIX rdf:<http://www.w3.org/2000/01/rdf-schema#>
  PREFIX ns:<http://somewhere#>
  SELECT DISTINCT ?Subject WHERE {
    {?Subject a ns:Person.} UNION {?SubClass rdf:subClassOf* ns:Person. ?Subject a ?SubClass}
  }
  '''
)
# Visualize the results
for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO

#RDFLIB
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s)
  for s1,p1,o1 in g.triples((s, None, None)):
    print(p1)
for s, p, o in g.triples((None, RDF.type, ns.Animal)):
  print(s)
  for s1, p1, o1 in g.triples((s, None, None)):
      print(p1)

print("------------------------------------------------------------")
#SPARQL
q1 = prepareQuery('''
  PREFIX ns:<http://somewhere#>
  SELECT DISTINCT ?Subject ?Predicade WHERE {
    {?Subject a ns:Person.
     ?Subject ?Predicade []. }
    UNION
    {?Subject a ns:Animal.
     ?Subject ?Predicade [].}
  }
  '''
)
# Visualize the results
for r in g.query(q1):
  print(r.Subject, r.Predicade)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO

vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

#RDFLIB
for s,p,o in g.triples((None,FOAF.knows, ns.RockySmith)):
  givenName = g.value(subject=s, predicate=vcard.FN, object=None)
  print(givenName)

print("-------------------------------------------------------------------")

#SPARQL
q1 = prepareQuery('''
  PREFIX vcard-rdf:<http://www.w3.org/2001/vcard-rdf/3.0/>
  PREFIX foaf:<http://xmlns.com/foaf/0.1/>
  PREFIX ns:<http://somewhere#>
  SELECT ?Name WHERE {
    ?Subject foaf:knows ns:RockySmith.
    ?Subject vcard-rdf:FN ?Name
  }
  '''
)
# Visualize the results
for r in g.query(q1):
  print(r.Name)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO

#RDFLIB
lista = {}
for s,p,o in g.triples((None,FOAF.knows, None)):
  conocedor = g.value(subject=s, predicate=vcard.FN, object=None)
  conocido =  g.value(subject=o, predicate=vcard.FN, object=None)
  if str(conocedor) not in lista:
        lista[str(conocedor)] = []

  # Agrega el conocido a la lista del conocedor
  lista[str(conocedor)].append(str(conocido))

for valor in lista:
  if len(valor) >= 2 and valor[0] != valor[1]:
    print(valor)

print("----------------------------------------------------------------")

#SPARQL
q1 = prepareQuery('''
  PREFIX vcard-rdf:<http://www.w3.org/2001/vcard-rdf/3.0/>
  PREFIX foaf:<http://xmlns.com/foaf/0.1/>
  PREFIX ns:<http://somewhere#>
  SELECT DISTINCT ?Name WHERE {
    ?Subject foaf:knows ?Person1, ?Person2.
    ?Subject vcard-rdf:FN ?Name
    FILTER (?Person1 != ?Person2).
  }
  '''
)
# Visualize the results
for r in g.query(q1):
  print(r.Name)