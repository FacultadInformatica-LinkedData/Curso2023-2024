# -*- coding: utf-8 -*-
"""Task06.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RkTQ_6-YThjaMLKKIcfDJkW8MHoFX9co

**Task 06: Modifying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""Read the RDF file as shown in class"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example5.rdf", format="xml")

"""Create a new class named Researcher"""

ns = Namespace("http://somewhere#")
g.add((ns.Researcher, RDF.type, RDFS.Class))
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.1: Create a new class named "University"**

"""

# TO DO

university = ns.University

# Agregar la declaración de tipo a la clase "University"
g.add((university, RDF.type, RDFS.Class))

# Guardar el grafo en un archivo (opcional)
g.serialize("university.rdf", format="xml")

# Visualize the results
for s, p, o in g:
  print(s,p,o)

if (university, RDF.type, RDFS.Class) in g:
    print("La clase 'University' existe en el grafo.")
else:
    print("La clase 'University' no existe en el grafo.")

"""**TASK 6.2: Add "Researcher" as a subclass of "Person"**"""

# TO DO

# Definir la clase "Person"
person = ns.Person

# Agregar la declaración de tipo a la clase "Person"
g.add((person, RDF.type, RDFS.Class))

# Agregar la declaración de que "Researcher" es una subclase de "Person"
g.add((ns.Researcher, RDFS.subClassOf, person))

# Guardar el grafo en un archivo (opcional)
g.serialize("ontology.rdf", format="xml")

# Visualize the results
for s, p, o in g:
  print(s,p,o)

# Verificar si "Researcher" es una subclase de "Person"
if (ns.Researcher, RDFS.subClassOf, person) in g:
    print("La clase 'Researcher' es una subclase de 'Person' en el grafo.")
else:
    print("La clase 'Researcher' no es una subclase de 'Person' en el grafo.")

"""**TASK 6.3: Create a new individual of Researcher named "Jane Smith"**"""

# TO DO

# Crear un individuo de "Researcher" con el nombre "Jane Smith"
jane_smith = ns.JaneSmith

# Agregar la declaración de tipo al individuo "Jane Smith"
g.add((jane_smith, RDF.type, ns.researcher))

# Guardar el grafo en un archivo (opcional)
g.serialize("ontology_with_individual.rdf", format="turtle")

# Visualize the results
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.4: Add to the individual JaneSmith the email address, fullName, given and family names**"""

# TO DO
from rdflib import Graph, Namespace, RDF, RDFS, Literal

jane_smith_uri = ns.JaneSmith

# Agregar propiedades al individuo "JaneSmith"
g.add((jane_smith_uri, ns.email, Literal("jane.smith@outlook.com")))
g.add((jane_smith_uri, ns.fullName, Literal("Jane Smith")))
g.add((jane_smith_uri, ns.givenName, Literal("Jane")))
g.add((jane_smith_uri, ns.familyName, Literal("Smith")))

# Guardar el grafo actualizado en un archivo (opcional)
g.serialize("ontology_with_individual_updated.rdf", format="turtle")

# Visualize the results
query = f"""
    SELECT ?predicate ?object
    WHERE {{
        <{jane_smith_uri}> ?predicate ?object .
    }}
"""

results = g.query(query)

# Imprimir las tripletas relacionadas con "Jane Smith"
for row in results:
    predicate = row["predicate"]
    object_value = row["object"]
    print(f"{jane_smith_uri} {predicate} {object_value}")

"""**TASK 6.5: Add UPM as the university where John Smith works**"""

# TO DO

# Agregar la declaración de que "John Smith" trabaja en la Universidad Politécnica de Madrid (UPM)
g.add((ns.JonhSmith, ns.worksAt, ns.UPM))

# Guardar el grafo actualizado en un archivo (opcional)
g.serialize("ontology_with_individual_updated.rdf", format="turtle")

# Visualize the results
# Consultar el grafo para obtener las tripletas relacionadas con "John Smith"
query = f"""
    SELECT ?predicate ?object
    WHERE {{
        <{ns.JonhSmith}> ?predicate ?object .
    }}
"""

results = g.query(query)

# Imprimir las tripletas relacionadas con "John Smith"
for row in results:
    predicate = row["predicate"]
    object_value = row["object"]
    print(f"{ns.JonhSmith} {predicate} {object_value}")

"""**Task 6.6: Add that Jown knows Jane using the FOAF vocabulary**"""

# TO DO
john_smith_uri = ns.JonhSmith
# Agregar la declaración de que "John Smith" conoce a "Jane Smith" utilizando FOAF
foaf = Namespace("http://xmlns.com/foaf/0.1/")
g.add((ns.JonhSmith, foaf.knows, ns.JaneSmith))

# Guardar el grafo actualizado en un archivo (opcional)
g.serialize("ontology_with_individual_updated.rdf", format="turtle")

# Visualize the results

known_triples = g.triples((john_smith_uri, foaf.knows, None))

# Imprimir las tripletas de los conocidos de "John Smith"
for s, p, o in known_triples:
    print(f"{s} {p} {o}")