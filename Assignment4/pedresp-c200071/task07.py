# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q41cmeZ-xbRwRbGVP3yNroeXbjLftzxX

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery
ns=Namespace("http://somewhere#")
# TO DO
q1 = prepareQuery('''
  select ?subclasses where {
    ?subclasses rdfs:subClassOf ?obj.
    filter(?obj=ns:LivingThing)
  }
''', initNs= {"rdfs": RDFS, "ns": ns})

# Visualize the results
for r in g.query(q1):
  print(r.subclasses)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
q2 = prepareQuery('''
  select ?ind where {
    {
    ?ind rdf:type ns:Person.
    }
    union
    {
    ?x rdfs:subClassOf ns:Person.
    ?ind rdf:type ?x.
    }
  }
''', initNs={"ns": ns, "rdf": RDF, "rdfs": RDFS})
# Visualize the results
for r in g.query(q2):
  print(r.ind)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
q3 = prepareQuery('''
  select ?indv ?prop where {
    {
      ?indv rdf:type ns:Person.
      ?indv ?prop ?whatever
    }
    union
    {
      ?indv rdf:type ns:Animal.
      ?indv ?prop ?whatever
    }
  }
''', initNs = { "ns": ns, "rdf": RDF})
# Visualize the results
for r in g.query(q3):
  print(r.indv, r.prop)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
from rdflib import FOAF
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
q4 = prepareQuery('''
  select ?name where {
    {
      ?indiv rdf:type ns:Person.
      ?indiv foaf:knows ns:RockySmith.
      ?indiv vcard:FN ?name
    }
    union
    {
      ?class rdfs:subClassOf ns:Person.
      ?indiv rdf:type ?class.
      ?indiv foaf:knows ns:RockySmith.
      ?indiv vcard:FN ?name
    }
  }
''', initNs={"ns": ns, "rdf": RDF, "rdfs": RDFS, "vcard": VCARD, "foaf": FOAF})
# Visualize the results
for r in g.query(q4):
  print(r.name)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
q5 = prepareQuery('''
  select ?ent where{
    ?ent foaf:knows ?ent2.
  }
  group by ?ent
  having (count(?ent)>1)
''', initNs={"foaf": FOAF})
# Visualize the results
for r in g.query(q5):
  print(r.ent)